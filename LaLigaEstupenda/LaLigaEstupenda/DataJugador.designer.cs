#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LaLigaEstupenda
{
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Data;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Linq;
    using System.Linq.Expressions;
    using System.ComponentModel;
    using System;
    using System.IO;

    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Jugadores")]
	public partial class DataJugadorDataContext : System.Data.Linq.DataContext
	{
		private string JugadoresConnectionString = @"Data Source=LAPTOP-9O6H0DES\SQLEXPRESS;Initial Catalog=Jugadores;Integrated Security=True;Connect Timeout=15;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False";
        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertJugador(Jugador instance);
    partial void UpdateJugador(Jugador instance);
    partial void DeleteJugador(Jugador instance);
    #endregion
		
		public DataJugadorDataContext() : 
				base(global::LaLigaEstupenda.Properties.Settings.Default.JugadoresConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataJugadorDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataJugadorDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataJugadorDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataJugadorDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Jugador> Jugadors
		{
			get
			{
				return this.GetTable<Jugador>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Jugador")]
	public partial class Jugador : INotifyPropertyChanging, INotifyPropertyChanged
	{
        string path = Path.Combine(Environment.CurrentDirectory, @"Log files\", @"Excepciones.log");

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nombre;
		
		private string _Equipo;
		
		private string _Posición;
		
		private decimal _Valor;
		
		private string _Nacionalidad;


        // Class methods
        public int Create(Jugador jugador)
        {
            using (DataJugadorDataContext db = new DataJugadorDataContext())
            {
                db.Jugadors.InsertOnSubmit(jugador);

                try
                {
                    db.SubmitChanges();
                }
                catch (Exception ex)
                {
                    using (StreamWriter writer = new StreamWriter(path, true))
                    {
                        writer.WriteLine(ex.Message);
                    }
                    throw ex;
                }

                return jugador.Id;
            }
        }

        public void Delete(int id)
        {
            using (DataJugadorDataContext db = new DataJugadorDataContext())
            {
                var jugadorDelete =
                (from jugador in db.Jugadors
                 where jugador.Id == id
                 select jugador)
                 .First();
                db.Jugadors.DeleteOnSubmit(jugadorDelete);
                try
                {
                    db.SubmitChanges();
                }
                catch (Exception ex)
                {
                    using (StreamWriter writer = new StreamWriter(path, true))
                    {
                        writer.WriteLine(ex.Message);
                    }
                    throw ex;
                }
            }
        }

        public void Update(int id, Jugador jugador)
        {
            using (DataJugadorDataContext db = new DataJugadorDataContext())
            {
                var jugadorUpdate =
                (from j in db.Jugadors
                 where j.Id == id
                 select j)
                 .First();

                if (jugadorUpdate != null)
                { 
                    jugadorUpdate.Nombre = jugador.Nombre;
                    jugadorUpdate.Nacionalidad = jugador.Nacionalidad;
                    jugadorUpdate.Posición = jugador.Posición;
                    jugadorUpdate.Valor = jugador.Valor;
                    jugadorUpdate.Equipo = jugador.Equipo;
                }
                try
                {
                    db.SubmitChanges();
                }
                catch (Exception ex)
                {
                    using (StreamWriter writer = new StreamWriter(path, true))
                    {
                        writer.WriteLine(ex.Message);
                    }
                    throw ex;
                }
            }
        }

        public Jugador Read(int id)
        {
            using (DataJugadorDataContext db = new DataJugadorDataContext())
            {
                var jugadorRead =
                (from jugador in db.Jugadors
                 where jugador.Id == id
                 select jugador)
                 .First();
                return jugadorRead;
            }
        }

        public List<Jugador> Read()
        {
            using (DataJugadorDataContext db = new DataJugadorDataContext())
            {
                var jugadores =
                (from jugador in db.Jugadors
                 select jugador);
                List<Jugador> jugadorList = new List<Jugador>();
                foreach (var jugador in jugadores)
                {
                    jugadorList.Add(jugador);
                }
                return jugadorList;
            }
        }

        #region Extensibility Method Definitions
        partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnEquipoChanging(string value);
    partial void OnEquipoChanged();
    partial void OnPosiciónChanging(string value);
    partial void OnPosiciónChanged();
    partial void OnValorChanging(decimal value);
    partial void OnValorChanged();
    partial void OnNacionalidadChanging(string value);
    partial void OnNacionalidadChanged();
    #endregion
		
		public Jugador()
		{
			OnCreated();
		}

        public Jugador(int id, string nombre, string equipo, string posición, int valor, string nacionalidad)
        {
            Id = id;
            Nombre = nombre;
            Equipo = equipo;
            Posición = posición;
            Valor = valor;
            Nacionalidad = nacionalidad;
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Equipo", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Equipo
		{
			get
			{
				return this._Equipo;
			}
			set
			{
				if ((this._Equipo != value))
				{
					this.OnEquipoChanging(value);
					this.SendPropertyChanging();
					this._Equipo = value;
					this.SendPropertyChanged("Equipo");
					this.OnEquipoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Posición", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Posición
		{
			get
			{
				return this._Posición;
			}
			set
			{
				if ((this._Posición != value))
				{
					this.OnPosiciónChanging(value);
					this.SendPropertyChanging();
					this._Posición = value;
					this.SendPropertyChanged("Posición");
					this.OnPosiciónChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Valor", DbType="Decimal(3,0) NOT NULL")]
		public decimal Valor
		{
			get
			{
				return this._Valor;
			}
			set
			{
				if ((this._Valor != value))
				{
					this.OnValorChanging(value);
					this.SendPropertyChanging();
					this._Valor = value;
					this.SendPropertyChanged("Valor");
					this.OnValorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nacionalidad", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nacionalidad
		{
			get
			{
				return this._Nacionalidad;
			}
			set
			{
				if ((this._Nacionalidad != value))
				{
					this.OnNacionalidadChanging(value);
					this.SendPropertyChanging();
					this._Nacionalidad = value;
					this.SendPropertyChanged("Nacionalidad");
					this.OnNacionalidadChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
